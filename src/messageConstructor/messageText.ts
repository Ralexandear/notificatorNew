// import { User } from "../database/models";

import PointsController from "../controllers/databaseControllers/PointsController"
import { Point, User } from "../database/models"
import { PostfixEnum } from "../enums/PostfixEnum"
import { ShiftSelectorType, ShiftType } from "../types/ShiftType"

const getDateString = (date = new Date()) => date.toLocaleDateString('ru', {weekday: 'long', month: 'short', day: 'numeric', year: 'numeric'})
const getUserlink = (user: User) => `<a href="t.me/${user.username}">${user.name}</a>`

export class MessageTextClass {
  // private user: User
  
  // constructor( user: User ){
  //   this.user = user
  // };

  welcomeMessage(){
    return `–ë–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –°–ù–ö. –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`
  }

  menu(){
    return {
      mainMenu() {
        return '–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω—ã!'
      },

      presets() {
        return '–ü—Ä–µ—Å–µ—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤'
      },

      selectPoints() {
        return '–ö–∞–∫–∏–µ —Å–º–µ–Ω—ã –∂–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å?'
      },

      async status( user: User ){
        const points = await PointsController.getAll();
        const currentPoints: string[] = [];
        const shiftTypes: ShiftType[] = ['morning', 'evening']

        for (const e of points) {
          const result = shiftTypes.reduce((res, shiftType) => {
            const userId = e.getUserId( shiftType );
            if (userId !== user.id) return res

            if (res) return e.point + PostfixEnum.full; // if res, means first half is checked
            if (shiftType === 'morning') return e.point + PostfixEnum.morning
            if (shiftType === 'evening') return e.point + PostfixEnum.evening
          }, undefined as string | undefined);

          if (result) currentPoints.push(result);
        }

        return [
          getDateString(),
          '–¢–æ—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:',
          '',
          (currentPoints.join(', ') || '–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫') + ';' 
        ].join('\n')
      }

      
    }
  }

  errors() {
    return {
      usernameIsMissing(){
        return '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞.\nüîÑ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!'
      },

      authorizationError() {
        return `‚ùóÔ∏è–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!`
      }
    }
  }

  orders(specialOrderType: string, messageText: string) {
    return {
      mainMessage(){
        return [specialOrderType, messageText].join('\n\n')
      },

      listenerMessage(pointNum: string | number, deliveryTime?: string){
        let text = `–£ –∫—É—Ä—å–µ—Ä–∞ –ö${pointNum} –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n\n–¢–∏–ø: ${specialOrderType}`
        if (deliveryTime) text += '\n\n–î–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ: ' + deliveryTime
        return text
      },
      
      acception(user: User){
        return `‚úÖ ${getUserlink(user)} –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É`
      }
    }
  }

  points () {
    return {
      pointList() {
        return getDateString()
      },

      async pointIsBusy( point: Point, shiftTypeToSelect: ShiftSelectorType ) {
        const textArray = [getDateString(), '']

        const shiftTypes: ShiftType[] = shiftTypeToSelect === 'full' ? ['morning', 'evening'] : [ shiftTypeToSelect ]
        
        for (const shiftType of shiftTypes){
          const user = await point.getUser( shiftType );
          const postfix = PostfixEnum[ shiftType ];
          textArray.push(point.point + postfix + ': ' + (user === undefined ? 'üü¢' : getUserlink(user)))
        }

        return textArray.join('\n')
      }
    }
  }

  notifications(){
    return {
      pointLost(user: User, point: string){
        return [getUserlink(user), '–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–Ω—è–ª —Ç–æ—á–∫—É', point].join(' ')
      }
    }
  }

  presets(selectedPoint: Point) {
    return `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è —Ç–æ—á–∫–∏: ${selectedPoint.point}`
  }

  
}

export const MessageText = new MessageTextClass()
export default MessageText;